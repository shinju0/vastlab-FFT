-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_DIT_RN_reverse_input_stream_UF2_Loop_READ_STREAM_INPUT_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0 : OUT STD_LOGIC;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of FFT_DIT_RN_reverse_input_stream_UF2_Loop_READ_STREAM_INPUT_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln258_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_r_blk_n : STD_LOGIC;
    signal zext_ln273_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln274_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln275_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i45_fu_98 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_fu_430_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i45_load : STD_LOGIC_VECTOR (4 downto 0);
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0_local : STD_LOGIC;
    signal bitcast_ln262_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0_local : STD_LOGIC;
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0_local : STD_LOGIC;
    signal bitcast_ln262_2_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0_local : STD_LOGIC;
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0_local : STD_LOGIC;
    signal bitcast_ln262_4_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0_local : STD_LOGIC;
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0_local : STD_LOGIC;
    signal bitcast_ln262_6_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0_local : STD_LOGIC;
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0_local : STD_LOGIC;
    signal bitcast_ln262_1_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0_local : STD_LOGIC;
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0_local : STD_LOGIC;
    signal bitcast_ln262_3_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0_local : STD_LOGIC;
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0_local : STD_LOGIC;
    signal bitcast_ln262_5_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0_local : STD_LOGIC;
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0_local : STD_LOGIC;
    signal bitcast_ln262_7_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0_local : STD_LOGIC;
    signal trunc_ln262_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln262_7_fu_224_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln262_8_fu_234_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln262_9_fu_244_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln262_s_fu_254_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln262_1_fu_264_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln262_2_fu_274_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln262_3_fu_284_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_fu_334_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_1_fu_342_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_2_fu_350_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_3_fu_358_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln_fu_366_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln70_1_fu_376_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln70_2_fu_386_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln70_3_fu_396_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FFT_DIT_RN_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component FFT_DIT_RN_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i45_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i45_fu_98 <= i_fu_430_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(in_r_empty_n, ap_done_reg, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (in_r_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln258_fu_436_p2)
    begin
        if (((icmp_ln258_fu_436_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i45_load_assign_proc : process(ap_CS_fsm_state1, i45_fu_98, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i45_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i45_load <= i45_fu_98;
        end if; 
    end process;

    bitcast_ln262_1_fu_299_p1 <= trunc_ln262_7_fu_224_p4;
    bitcast_ln262_2_fu_304_p1 <= trunc_ln262_8_fu_234_p4;
    bitcast_ln262_3_fu_309_p1 <= trunc_ln262_9_fu_244_p4;
    bitcast_ln262_4_fu_314_p1 <= trunc_ln262_s_fu_254_p4;
    bitcast_ln262_5_fu_319_p1 <= trunc_ln262_1_fu_264_p4;
    bitcast_ln262_6_fu_324_p1 <= trunc_ln262_2_fu_274_p4;
    bitcast_ln262_7_fu_329_p1 <= trunc_ln262_3_fu_284_p4;
    bitcast_ln262_fu_294_p1 <= trunc_ln262_fu_220_p1;
    i_fu_430_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i45_load) + unsigned(ap_const_lv5_1));
    icmp_ln258_fu_436_p2 <= "1" when (ap_sig_allocacmp_i45_load = ap_const_lv5_1F) else "0";

    in_r_blk_n_assign_proc : process(ap_CS_fsm_state1, in_r_empty_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_r_blk_n <= in_r_empty_n;
        else 
            in_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_r_read <= ap_const_logic_1;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;

    input_1_fu_342_p3 <= (ap_sig_allocacmp_i45_load & ap_const_lv2_1);
    input_2_fu_350_p3 <= (ap_sig_allocacmp_i45_load & ap_const_lv2_2);
    input_3_fu_358_p3 <= (ap_sig_allocacmp_i45_load & ap_const_lv2_3);
    input_fu_334_p3 <= (ap_sig_allocacmp_i45_load & ap_const_lv2_0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_address0 <= zext_ln273_fu_406_p1(5 - 1 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_d0 <= bitcast_ln262_fu_294_p1;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_address0 <= zext_ln275_fu_418_p1(5 - 1 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_d0 <= bitcast_ln262_4_fu_314_p1;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_address0 <= zext_ln274_fu_412_p1(5 - 1 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_d0 <= bitcast_ln262_2_fu_304_p1;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_address0 <= zext_ln276_fu_424_p1(5 - 1 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_d0 <= bitcast_ln262_6_fu_324_p1;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_address0 <= zext_ln273_fu_406_p1(5 - 1 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_d0 <= bitcast_ln262_1_fu_299_p1;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_address0 <= zext_ln275_fu_418_p1(5 - 1 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_d0 <= bitcast_ln262_5_fu_319_p1;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_address0 <= zext_ln274_fu_412_p1(5 - 1 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_d0 <= bitcast_ln262_3_fu_309_p1;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_address0 <= zext_ln276_fu_424_p1(5 - 1 downto 0);
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_d0 <= bitcast_ln262_7_fu_329_p1;
    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0 <= reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0_local;

    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0_local <= ap_const_logic_1;
        else 
            reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln262_1_fu_264_p4 <= in_r_dout(191 downto 160);
    trunc_ln262_2_fu_274_p4 <= in_r_dout(223 downto 192);
    trunc_ln262_3_fu_284_p4 <= in_r_dout(255 downto 224);
    trunc_ln262_7_fu_224_p4 <= in_r_dout(63 downto 32);
    trunc_ln262_8_fu_234_p4 <= in_r_dout(95 downto 64);
    trunc_ln262_9_fu_244_p4 <= in_r_dout(127 downto 96);
    trunc_ln262_fu_220_p1 <= in_r_dout(32 - 1 downto 0);
    trunc_ln262_s_fu_254_p4 <= in_r_dout(159 downto 128);
    
    trunc_ln70_1_fu_376_p4_proc : process(input_1_fu_342_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(7+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(7+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable trunc_ln70_1_fu_376_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(7 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_6(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_2(3 - 1 downto 0);
        v0_cpy := input_1_fu_342_p3;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(7-1-unsigned(ap_const_lv32_2(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(7-1-unsigned(ap_const_lv32_6(3-1 downto 0)));
            for trunc_ln70_1_fu_376_p4_i in 0 to 7-1 loop
                v0_cpy(trunc_ln70_1_fu_376_p4_i) := input_1_fu_342_p3(7-1-trunc_ln70_1_fu_376_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(7-1 downto 0)))));
        res_mask := res_mask(7-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        trunc_ln70_1_fu_376_p4 <= resvalue(5-1 downto 0);
    end process;

    
    trunc_ln70_2_fu_386_p4_proc : process(input_2_fu_350_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(7+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(7+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable trunc_ln70_2_fu_386_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(7 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_6(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_2(3 - 1 downto 0);
        v0_cpy := input_2_fu_350_p3;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(7-1-unsigned(ap_const_lv32_2(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(7-1-unsigned(ap_const_lv32_6(3-1 downto 0)));
            for trunc_ln70_2_fu_386_p4_i in 0 to 7-1 loop
                v0_cpy(trunc_ln70_2_fu_386_p4_i) := input_2_fu_350_p3(7-1-trunc_ln70_2_fu_386_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(7-1 downto 0)))));
        res_mask := res_mask(7-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        trunc_ln70_2_fu_386_p4 <= resvalue(5-1 downto 0);
    end process;

    
    trunc_ln70_3_fu_396_p4_proc : process(input_3_fu_358_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(7+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(7+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable trunc_ln70_3_fu_396_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(7 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_6(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_2(3 - 1 downto 0);
        v0_cpy := input_3_fu_358_p3;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(7-1-unsigned(ap_const_lv32_2(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(7-1-unsigned(ap_const_lv32_6(3-1 downto 0)));
            for trunc_ln70_3_fu_396_p4_i in 0 to 7-1 loop
                v0_cpy(trunc_ln70_3_fu_396_p4_i) := input_3_fu_358_p3(7-1-trunc_ln70_3_fu_396_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(7-1 downto 0)))));
        res_mask := res_mask(7-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        trunc_ln70_3_fu_396_p4 <= resvalue(5-1 downto 0);
    end process;

    
    trunc_ln_fu_366_p4_proc : process(input_fu_334_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(7+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(7+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable trunc_ln_fu_366_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(7 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(7 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_6(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_2(3 - 1 downto 0);
        v0_cpy := input_fu_334_p3;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(7-1-unsigned(ap_const_lv32_2(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(7-1-unsigned(ap_const_lv32_6(3-1 downto 0)));
            for trunc_ln_fu_366_p4_i in 0 to 7-1 loop
                v0_cpy(trunc_ln_fu_366_p4_i) := input_fu_334_p3(7-1-trunc_ln_fu_366_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(7-1 downto 0)))));
        res_mask := res_mask(7-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        trunc_ln_fu_366_p4 <= resvalue(5-1 downto 0);
    end process;

    zext_ln273_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_366_p4),64));
    zext_ln274_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln70_1_fu_376_p4),64));
    zext_ln275_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln70_2_fu_386_p4),64));
    zext_ln276_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln70_3_fu_396_p4),64));
end behav;
