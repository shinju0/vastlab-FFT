// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module FFT_DIT_RN_FFT_Stage1_vectorstream_parameterize_Loop_FFT_Stage1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        reverse_in_stream_vector_dout,
        reverse_in_stream_vector_empty_n,
        reverse_in_stream_vector_read,
        reverse_in_stream_vector_num_data_valid,
        reverse_in_stream_vector_fifo_cap,
        data_s1_stream_vector_din,
        data_s1_stream_vector_full_n,
        data_s1_stream_vector_write,
        data_s1_stream_vector_num_data_valid,
        data_s1_stream_vector_fifo_cap
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] reverse_in_stream_vector_dout;
input   reverse_in_stream_vector_empty_n;
output   reverse_in_stream_vector_read;
input  [2:0] reverse_in_stream_vector_num_data_valid;
input  [2:0] reverse_in_stream_vector_fifo_cap;
output  [255:0] data_s1_stream_vector_din;
input   data_s1_stream_vector_full_n;
output   data_s1_stream_vector_write;
input  [31:0] data_s1_stream_vector_num_data_valid;
input  [31:0] data_s1_stream_vector_fifo_cap;

reg ap_idle;
reg reverse_in_stream_vector_read;
reg data_s1_stream_vector_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln496_fu_287_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    reverse_in_stream_vector_blk_n;
wire    ap_block_pp0_stage0;
reg    data_s1_stream_vector_blk_n;
wire   [31:0] d0_fu_233_p1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] d0_14_fu_239_p1;
wire   [31:0] d1_fu_245_p1;
wire   [31:0] d1_30_fu_251_p1;
wire   [31:0] d0_15_fu_257_p1;
wire   [31:0] d0_16_fu_263_p1;
wire   [31:0] d1_31_fu_269_p1;
wire   [31:0] d1_32_fu_275_p1;
reg   [4:0] m1_fu_102;
wire   [4:0] m_fu_281_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_m1_load;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] trunc_ln501_fu_159_p1;
wire   [31:0] trunc_ln501_2_fu_163_p4;
wire   [31:0] trunc_ln501_3_fu_173_p4;
wire   [31:0] trunc_ln501_4_fu_183_p4;
wire   [31:0] trunc_ln501_5_fu_193_p4;
wire   [31:0] trunc_ln501_6_fu_203_p4;
wire   [31:0] trunc_ln501_7_fu_213_p4;
wire   [31:0] trunc_ln501_8_fu_223_p4;
wire   [31:0] grp_fu_119_p2;
wire   [31:0] grp_fu_123_p2;
wire   [31:0] grp_fu_127_p2;
wire   [31:0] grp_fu_131_p2;
wire   [31:0] grp_fu_135_p2;
wire   [31:0] grp_fu_139_p2;
wire   [31:0] grp_fu_143_p2;
wire   [31:0] grp_fu_147_p2;
wire   [31:0] bitcast_ln511_7_fu_326_p1;
wire   [31:0] bitcast_ln511_6_fu_322_p1;
wire   [31:0] bitcast_ln511_5_fu_318_p1;
wire   [31:0] bitcast_ln511_4_fu_314_p1;
wire   [31:0] bitcast_ln511_3_fu_310_p1;
wire   [31:0] bitcast_ln511_2_fu_306_p1;
wire   [31:0] bitcast_ln511_1_fu_302_p1;
wire   [31:0] bitcast_ln511_fu_298_p1;
reg    grp_fu_119_ce;
reg    grp_fu_123_ce;
reg    grp_fu_127_ce;
reg    grp_fu_131_ce;
reg    grp_fu_135_ce;
reg    grp_fu_139_ce;
reg    grp_fu_143_ce;
reg    grp_fu_147_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_261;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 m1_fu_102 = 5'd0;
end

FFT_DIT_RN_fadd_32ns_32ns_32_14_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_14_no_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d0_fu_233_p1),
    .din1(d1_fu_245_p1),
    .ce(grp_fu_119_ce),
    .dout(grp_fu_119_p2)
);

FFT_DIT_RN_fadd_32ns_32ns_32_14_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_14_no_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d0_14_fu_239_p1),
    .din1(d1_30_fu_251_p1),
    .ce(grp_fu_123_ce),
    .dout(grp_fu_123_p2)
);

FFT_DIT_RN_fsub_32ns_32ns_32_14_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_14_no_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d0_fu_233_p1),
    .din1(d1_fu_245_p1),
    .ce(grp_fu_127_ce),
    .dout(grp_fu_127_p2)
);

FFT_DIT_RN_fsub_32ns_32ns_32_14_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_14_no_dsp_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d0_14_fu_239_p1),
    .din1(d1_30_fu_251_p1),
    .ce(grp_fu_131_ce),
    .dout(grp_fu_131_p2)
);

FFT_DIT_RN_fadd_32ns_32ns_32_14_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_14_no_dsp_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d0_15_fu_257_p1),
    .din1(d1_31_fu_269_p1),
    .ce(grp_fu_135_ce),
    .dout(grp_fu_135_p2)
);

FFT_DIT_RN_fadd_32ns_32ns_32_14_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_14_no_dsp_1_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d0_16_fu_263_p1),
    .din1(d1_32_fu_275_p1),
    .ce(grp_fu_139_ce),
    .dout(grp_fu_139_p2)
);

FFT_DIT_RN_fsub_32ns_32ns_32_14_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_14_no_dsp_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d0_15_fu_257_p1),
    .din1(d1_31_fu_269_p1),
    .ce(grp_fu_143_ce),
    .dout(grp_fu_143_p2)
);

FFT_DIT_RN_fsub_32ns_32ns_32_14_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_14_no_dsp_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d0_16_fu_263_p1),
    .din1(d1_32_fu_275_p1),
    .ce(grp_fu_147_ce),
    .dout(grp_fu_147_p2)
);

FFT_DIT_RN_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter13_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter13_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_261)) begin
        m1_fu_102 <= m_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((icmp_ln496_fu_287_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter13_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_m1_load = 5'd0;
    end else begin
        ap_sig_allocacmp_m1_load = m1_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        data_s1_stream_vector_blk_n = data_s1_stream_vector_full_n;
    end else begin
        data_s1_stream_vector_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        data_s1_stream_vector_write = 1'b1;
    end else begin
        data_s1_stream_vector_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_119_ce = 1'b1;
    end else begin
        grp_fu_119_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_123_ce = 1'b1;
    end else begin
        grp_fu_123_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_127_ce = 1'b1;
    end else begin
        grp_fu_127_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_131_ce = 1'b1;
    end else begin
        grp_fu_131_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_135_ce = 1'b1;
    end else begin
        grp_fu_135_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_139_ce = 1'b1;
    end else begin
        grp_fu_139_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_143_ce = 1'b1;
    end else begin
        grp_fu_143_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_147_ce = 1'b1;
    end else begin
        grp_fu_147_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reverse_in_stream_vector_blk_n = reverse_in_stream_vector_empty_n;
    end else begin
        reverse_in_stream_vector_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reverse_in_stream_vector_read = 1'b1;
    end else begin
        reverse_in_stream_vector_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter13 = (data_s1_stream_vector_full_n == 1'b0);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (reverse_in_stream_vector_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_261 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bitcast_ln511_1_fu_302_p1 = grp_fu_123_p2;

assign bitcast_ln511_2_fu_306_p1 = grp_fu_127_p2;

assign bitcast_ln511_3_fu_310_p1 = grp_fu_131_p2;

assign bitcast_ln511_4_fu_314_p1 = grp_fu_135_p2;

assign bitcast_ln511_5_fu_318_p1 = grp_fu_139_p2;

assign bitcast_ln511_6_fu_322_p1 = grp_fu_143_p2;

assign bitcast_ln511_7_fu_326_p1 = grp_fu_147_p2;

assign bitcast_ln511_fu_298_p1 = grp_fu_119_p2;

assign d0_14_fu_239_p1 = trunc_ln501_2_fu_163_p4;

assign d0_15_fu_257_p1 = trunc_ln501_5_fu_193_p4;

assign d0_16_fu_263_p1 = trunc_ln501_6_fu_203_p4;

assign d0_fu_233_p1 = trunc_ln501_fu_159_p1;

assign d1_30_fu_251_p1 = trunc_ln501_4_fu_183_p4;

assign d1_31_fu_269_p1 = trunc_ln501_7_fu_213_p4;

assign d1_32_fu_275_p1 = trunc_ln501_8_fu_223_p4;

assign d1_fu_245_p1 = trunc_ln501_3_fu_173_p4;

assign data_s1_stream_vector_din = {{{{{{{{bitcast_ln511_7_fu_326_p1}, {bitcast_ln511_6_fu_322_p1}}, {bitcast_ln511_5_fu_318_p1}}, {bitcast_ln511_4_fu_314_p1}}, {bitcast_ln511_3_fu_310_p1}}, {bitcast_ln511_2_fu_306_p1}}, {bitcast_ln511_1_fu_302_p1}}, {bitcast_ln511_fu_298_p1}};

assign icmp_ln496_fu_287_p2 = ((ap_sig_allocacmp_m1_load == 5'd31) ? 1'b1 : 1'b0);

assign m_fu_281_p2 = (ap_sig_allocacmp_m1_load + 5'd1);

assign trunc_ln501_2_fu_163_p4 = {{reverse_in_stream_vector_dout[63:32]}};

assign trunc_ln501_3_fu_173_p4 = {{reverse_in_stream_vector_dout[95:64]}};

assign trunc_ln501_4_fu_183_p4 = {{reverse_in_stream_vector_dout[127:96]}};

assign trunc_ln501_5_fu_193_p4 = {{reverse_in_stream_vector_dout[159:128]}};

assign trunc_ln501_6_fu_203_p4 = {{reverse_in_stream_vector_dout[191:160]}};

assign trunc_ln501_7_fu_213_p4 = {{reverse_in_stream_vector_dout[223:192]}};

assign trunc_ln501_8_fu_223_p4 = {{reverse_in_stream_vector_dout[255:224]}};

assign trunc_ln501_fu_159_p1 = reverse_in_stream_vector_dout[31:0];

endmodule //FFT_DIT_RN_FFT_Stage1_vectorstream_parameterize_Loop_FFT_Stage1_proc
