// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module FFT_DIT_RN_reverse_input_stream_UF2_Loop_READ_STREAM_INPUT_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_d0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_d0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_d0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_d0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_d0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_d0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_d0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0;
output  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_d0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0;
output  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_d0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0;
output  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_d0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0;
output  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_d0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0;
output  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_d0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0;
output  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_d0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0;
output  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_d0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0;
output  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_d0;

reg ap_idle;
reg in_r_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln258_fu_436_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_r_blk_n;
wire   [63:0] zext_ln273_fu_406_p1;
wire   [63:0] zext_ln274_fu_412_p1;
wire   [63:0] zext_ln275_fu_418_p1;
wire   [63:0] zext_ln276_fu_424_p1;
reg   [4:0] i45_fu_98;
wire   [4:0] i_fu_430_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i45_load;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0_local;
wire   [31:0] bitcast_ln262_fu_294_p1;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0_local;
wire   [31:0] bitcast_ln262_2_fu_304_p1;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0_local;
wire   [31:0] bitcast_ln262_4_fu_314_p1;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0_local;
wire   [31:0] bitcast_ln262_6_fu_324_p1;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0_local;
wire   [31:0] bitcast_ln262_1_fu_299_p1;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0_local;
wire   [31:0] bitcast_ln262_3_fu_309_p1;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0_local;
wire   [31:0] bitcast_ln262_5_fu_319_p1;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0_local;
wire   [31:0] bitcast_ln262_7_fu_329_p1;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0_local;
wire   [31:0] trunc_ln262_fu_220_p1;
wire   [31:0] trunc_ln262_7_fu_224_p4;
wire   [31:0] trunc_ln262_8_fu_234_p4;
wire   [31:0] trunc_ln262_9_fu_244_p4;
wire   [31:0] trunc_ln262_s_fu_254_p4;
wire   [31:0] trunc_ln262_1_fu_264_p4;
wire   [31:0] trunc_ln262_2_fu_274_p4;
wire   [31:0] trunc_ln262_3_fu_284_p4;
wire   [6:0] input_fu_334_p3;
wire   [6:0] input_1_fu_342_p3;
wire   [6:0] input_2_fu_350_p3;
wire   [6:0] input_3_fu_358_p3;
reg   [4:0] trunc_ln_fu_366_p4;
reg   [4:0] trunc_ln70_1_fu_376_p4;
reg   [4:0] trunc_ln70_2_fu_386_p4;
reg   [4:0] trunc_ln70_3_fu_396_p4;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
#0 i45_fu_98 = 5'd0;
end

FFT_DIT_RN_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i45_fu_98 <= i_fu_430_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln258_fu_436_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i45_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i45_load = i45_fu_98;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_r_blk_n = in_r_empty_n;
    end else begin
        in_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        in_r_read = 1'b1;
    end else begin
        in_r_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | (in_r_empty_n == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bitcast_ln262_1_fu_299_p1 = trunc_ln262_7_fu_224_p4;

assign bitcast_ln262_2_fu_304_p1 = trunc_ln262_8_fu_234_p4;

assign bitcast_ln262_3_fu_309_p1 = trunc_ln262_9_fu_244_p4;

assign bitcast_ln262_4_fu_314_p1 = trunc_ln262_s_fu_254_p4;

assign bitcast_ln262_5_fu_319_p1 = trunc_ln262_1_fu_264_p4;

assign bitcast_ln262_6_fu_324_p1 = trunc_ln262_2_fu_274_p4;

assign bitcast_ln262_7_fu_329_p1 = trunc_ln262_3_fu_284_p4;

assign bitcast_ln262_fu_294_p1 = trunc_ln262_fu_220_p1;

assign i_fu_430_p2 = (ap_sig_allocacmp_i45_load + 5'd1);

assign icmp_ln258_fu_436_p2 = ((ap_sig_allocacmp_i45_load == 5'd31) ? 1'b1 : 1'b0);

assign input_1_fu_342_p3 = {{ap_sig_allocacmp_i45_load}, {2'd1}};

assign input_2_fu_350_p3 = {{ap_sig_allocacmp_i45_load}, {2'd2}};

assign input_3_fu_358_p3 = {{ap_sig_allocacmp_i45_load}, {2'd3}};

assign input_fu_334_p3 = {{ap_sig_allocacmp_i45_load}, {2'd0}};

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_address0 = zext_ln273_fu_406_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_d0 = bitcast_ln262_fu_294_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_0_we0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_address0 = zext_ln275_fu_418_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_d0 = bitcast_ln262_4_fu_314_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_1_we0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_address0 = zext_ln274_fu_412_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_d0 = bitcast_ln262_2_fu_304_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_2_we0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_address0 = zext_ln276_fu_424_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_d0 = bitcast_ln262_6_fu_324_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_0_3_we0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_address0 = zext_ln273_fu_406_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_d0 = bitcast_ln262_1_fu_299_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_0_we0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_address0 = zext_ln275_fu_418_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_d0 = bitcast_ln262_5_fu_319_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_1_we0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_address0 = zext_ln274_fu_412_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_d0 = bitcast_ln262_3_fu_309_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_2_we0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_address0 = zext_ln276_fu_424_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_d0 = bitcast_ln262_7_fu_329_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0 = reverse_input_stream_UF2_stream_stream_vector_0_data_rev_stream_1_3_we0_local;

assign trunc_ln262_1_fu_264_p4 = {{in_r_dout[191:160]}};

assign trunc_ln262_2_fu_274_p4 = {{in_r_dout[223:192]}};

assign trunc_ln262_3_fu_284_p4 = {{in_r_dout[255:224]}};

assign trunc_ln262_7_fu_224_p4 = {{in_r_dout[63:32]}};

assign trunc_ln262_8_fu_234_p4 = {{in_r_dout[95:64]}};

assign trunc_ln262_9_fu_244_p4 = {{in_r_dout[127:96]}};

assign trunc_ln262_fu_220_p1 = in_r_dout[31:0];

assign trunc_ln262_s_fu_254_p4 = {{in_r_dout[159:128]}};

integer ap_tvar_int_0;

always @ (input_1_fu_342_p3) begin
    for (ap_tvar_int_0 = 5 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 6 - 2) begin
            trunc_ln70_1_fu_376_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            trunc_ln70_1_fu_376_p4[ap_tvar_int_0] = input_1_fu_342_p3[6 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (input_2_fu_350_p3) begin
    for (ap_tvar_int_1 = 5 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 6 - 2) begin
            trunc_ln70_2_fu_386_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            trunc_ln70_2_fu_386_p4[ap_tvar_int_1] = input_2_fu_350_p3[6 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (input_3_fu_358_p3) begin
    for (ap_tvar_int_2 = 5 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 6 - 2) begin
            trunc_ln70_3_fu_396_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            trunc_ln70_3_fu_396_p4[ap_tvar_int_2] = input_3_fu_358_p3[6 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (input_fu_334_p3) begin
    for (ap_tvar_int_3 = 5 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 6 - 2) begin
            trunc_ln_fu_366_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            trunc_ln_fu_366_p4[ap_tvar_int_3] = input_fu_334_p3[6 - ap_tvar_int_3];
        end
    end
end

assign zext_ln273_fu_406_p1 = trunc_ln_fu_366_p4;

assign zext_ln274_fu_412_p1 = trunc_ln70_1_fu_376_p4;

assign zext_ln275_fu_418_p1 = trunc_ln70_2_fu_386_p4;

assign zext_ln276_fu_424_p1 = trunc_ln70_3_fu_396_p4;

endmodule //FFT_DIT_RN_reverse_input_stream_UF2_Loop_READ_STREAM_INPUT_proc
