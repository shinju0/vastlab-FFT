// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module FFT_DIT_RN_reverse_input_stream_UF2_Loop_STREAM_OUT_REVERSE_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        reverse_in_stream_vector_din,
        reverse_in_stream_vector_full_n,
        reverse_in_stream_vector_write,
        reverse_in_stream_vector_num_data_valid,
        reverse_in_stream_vector_fifo_cap,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_q0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_q0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_q0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_q0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_q0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_q0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_q0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_address0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_ce0,
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [255:0] reverse_in_stream_vector_din;
input   reverse_in_stream_vector_full_n;
output   reverse_in_stream_vector_write;
input  [31:0] reverse_in_stream_vector_num_data_valid;
input  [31:0] reverse_in_stream_vector_fifo_cap;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_ce0;
input  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_q0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_ce0;
input  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_q0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_ce0;
input  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_q0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_ce0;
input  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_q0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_ce0;
input  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_q0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_ce0;
input  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_q0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_ce0;
input  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_q0;
output  [4:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_address0;
output   reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_ce0;
input  [31:0] reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_q0;

reg ap_idle;
reg reverse_in_stream_vector_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln357_fu_195_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg    ap_loop_exit_ready_delayed;
reg    reverse_in_stream_vector_blk_n;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln357_fu_177_p1;
reg   [4:0] i45_fu_54;
wire   [4:0] i_fu_189_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i45_load;
reg    ap_block_pp0_stage0_01001;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_ce0_local;
reg    reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_ce0_local;
wire   [31:0] bitcast_ln364_7_fu_234_p1;
wire   [31:0] bitcast_ln364_6_fu_230_p1;
wire   [31:0] bitcast_ln364_5_fu_226_p1;
wire   [31:0] bitcast_ln364_4_fu_222_p1;
wire   [31:0] bitcast_ln364_3_fu_218_p1;
wire   [31:0] bitcast_ln364_2_fu_214_p1;
wire   [31:0] bitcast_ln364_1_fu_210_p1;
wire   [31:0] bitcast_ln364_fu_206_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_172;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i45_fu_54 = 5'd0;
end

FFT_DIT_RN_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_172)) begin
        i45_fu_54 <= i_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((icmp_ln357_fu_195_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i45_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i45_load = i45_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        reverse_in_stream_vector_blk_n = reverse_in_stream_vector_full_n;
    end else begin
        reverse_in_stream_vector_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        reverse_in_stream_vector_write = 1'b1;
    end else begin
        reverse_in_stream_vector_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_ce0_local = 1'b1;
    end else begin
        reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (reverse_in_stream_vector_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_172 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bitcast_ln364_1_fu_210_p1 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_q0;

assign bitcast_ln364_2_fu_214_p1 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_q0;

assign bitcast_ln364_3_fu_218_p1 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_q0;

assign bitcast_ln364_4_fu_222_p1 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_q0;

assign bitcast_ln364_5_fu_226_p1 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_q0;

assign bitcast_ln364_6_fu_230_p1 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_q0;

assign bitcast_ln364_7_fu_234_p1 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_q0;

assign bitcast_ln364_fu_206_p1 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_q0;

assign i_fu_189_p2 = (ap_sig_allocacmp_i45_load + 5'd1);

assign icmp_ln357_fu_195_p2 = ((ap_sig_allocacmp_i45_load == 5'd31) ? 1'b1 : 1'b0);

assign reverse_in_stream_vector_din = {{{{{{{{bitcast_ln364_7_fu_234_p1}, {bitcast_ln364_6_fu_230_p1}}, {bitcast_ln364_5_fu_226_p1}}, {bitcast_ln364_4_fu_222_p1}}, {bitcast_ln364_3_fu_218_p1}}, {bitcast_ln364_2_fu_214_p1}}, {bitcast_ln364_1_fu_210_p1}}, {bitcast_ln364_fu_206_p1}};

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_address0 = zext_ln357_fu_177_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_0_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_address0 = zext_ln357_fu_177_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_1_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_address0 = zext_ln357_fu_177_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_2_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_address0 = zext_ln357_fu_177_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_0_3_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_address0 = zext_ln357_fu_177_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_0_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_address0 = zext_ln357_fu_177_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_1_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_address0 = zext_ln357_fu_177_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_2_ce0_local;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_address0 = zext_ln357_fu_177_p1;

assign reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_ce0 = reverse_input_stream_UF2_stream_stream_vector_0_data_in_cyclic_1_3_ce0_local;

assign zext_ln357_fu_177_p1 = ap_sig_allocacmp_i45_load;

endmodule //FFT_DIT_RN_reverse_input_stream_UF2_Loop_STREAM_OUT_REVERSE_proc
