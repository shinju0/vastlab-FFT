-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_DIT_RN_FFT_DIT_RN_Pipeline_VITIS_LOOP_764_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC;
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_ce0 : OUT STD_LOGIC;
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_ce0 : OUT STD_LOGIC;
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_ce0 : OUT STD_LOGIC;
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_ce0 : OUT STD_LOGIC;
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_ce0 : OUT STD_LOGIC;
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_ce0 : OUT STD_LOGIC;
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_ce0 : OUT STD_LOGIC;
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_ce0 : OUT STD_LOGIC;
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of FFT_DIT_RN_FFT_DIT_RN_Pipeline_VITIS_LOOP_764_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln764_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_r_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal icmp_ln764_reg_262 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln764_fu_181_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln764_reg_266 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_0_fu_235_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_0_reg_311 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln764_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_fu_52 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_ce0_local : STD_LOGIC;
    signal FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_ce0_local : STD_LOGIC;
    signal FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_ce0_local : STD_LOGIC;
    signal FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_ce0_local : STD_LOGIC;
    signal FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_ce0_local : STD_LOGIC;
    signal FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_ce0_local : STD_LOGIC;
    signal FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_ce0_local : STD_LOGIC;
    signal FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_ce0_local : STD_LOGIC;
    signal bitcast_ln765_7_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln765_6_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln765_5_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln765_4_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln765_3_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln765_2_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln765_1_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln765_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_334 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component FFT_DIT_RN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component FFT_DIT_RN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_334)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_52 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_52 <= add_ln764_reg_266;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln764_reg_266 <= add_ln764_fu_181_p2;
                icmp_ln764_reg_262 <= icmp_ln764_fu_175_p2;
                p_0_reg_311 <= p_0_fu_235_p9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_address0 <= zext_ln764_fu_187_p1(6 - 1 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_ce0 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_ce0_local;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_ce0_local <= ap_const_logic_1;
        else 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_address0 <= zext_ln764_fu_187_p1(6 - 1 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_ce0 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_ce0_local;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_ce0_local <= ap_const_logic_1;
        else 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_address0 <= zext_ln764_fu_187_p1(6 - 1 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_ce0 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_ce0_local;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_ce0_local <= ap_const_logic_1;
        else 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_address0 <= zext_ln764_fu_187_p1(6 - 1 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_ce0 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_ce0_local;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_ce0_local <= ap_const_logic_1;
        else 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_address0 <= zext_ln764_fu_187_p1(6 - 1 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_ce0 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_ce0_local;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_ce0_local <= ap_const_logic_1;
        else 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_address0 <= zext_ln764_fu_187_p1(6 - 1 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_ce0 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_ce0_local;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_ce0_local <= ap_const_logic_1;
        else 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_address0 <= zext_ln764_fu_187_p1(6 - 1 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_ce0 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_ce0_local;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_ce0_local <= ap_const_logic_1;
        else 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_address0 <= zext_ln764_fu_187_p1(6 - 1 downto 0);
    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_ce0 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_ce0_local;

    FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_ce0_local <= ap_const_logic_1;
        else 
            FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln764_fu_181_p2 <= std_logic_vector(unsigned(i_fu_52) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, out_r_full_n)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((out_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, out_r_full_n)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((out_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, out_r_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((out_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_334_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
                ap_condition_334 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln764_fu_175_p2)
    begin
        if (((icmp_ln764_fu_175_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln764_reg_262, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln764_reg_262 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln765_1_fu_207_p1 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_0_q0;
    bitcast_ln765_2_fu_211_p1 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_1_q0;
    bitcast_ln765_3_fu_215_p1 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_1_q0;
    bitcast_ln765_4_fu_219_p1 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_2_q0;
    bitcast_ln765_5_fu_223_p1 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_2_q0;
    bitcast_ln765_6_fu_227_p1 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_3_q0;
    bitcast_ln765_7_fu_231_p1 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_1_3_q0;
    bitcast_ln765_fu_203_p1 <= FFT_DIT_RN_stream_stream_vector_complex_float_4ul_0_buffer_0_0_q0;
    icmp_ln764_fu_175_p2 <= "1" when (i_fu_52 = ap_const_lv7_40) else "0";

    out_r_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, out_r_full_n, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_r_blk_n <= out_r_full_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_din <= p_0_reg_311;

    out_r_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_r_write <= ap_const_logic_1;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;

    p_0_fu_235_p9 <= (((((((bitcast_ln765_7_fu_231_p1 & bitcast_ln765_6_fu_227_p1) & bitcast_ln765_5_fu_223_p1) & bitcast_ln765_4_fu_219_p1) & bitcast_ln765_3_fu_215_p1) & bitcast_ln765_2_fu_211_p1) & bitcast_ln765_1_fu_207_p1) & bitcast_ln765_fu_203_p1);
    zext_ln764_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_52),64));
end behav;
